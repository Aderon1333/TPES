// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	models "github.com/Aderon1333/TPES/internal/models"
	gin "github.com/gin-gonic/gin"

	logfacade "github.com/Aderon1333/TPES/pkg/utils/logfacade"

	mock "github.com/stretchr/testify/mock"
)

// UserManagerInterface is an autogenerated mock type for the UserManagerInterface type
type UserManagerInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, user, l
func (_m *UserManagerInterface) Delete(ctx *gin.Context, user *models.User, l *logfacade.LogFacade) error {
	ret := _m.Called(ctx, user, l)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User, *logfacade.LogFacade) error); ok {
		r0 = rf(ctx, user, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, user, l
func (_m *UserManagerInterface) Login(ctx *gin.Context, user *models.User, l *logfacade.LogFacade) error {
	ret := _m.Called(ctx, user, l)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User, *logfacade.LogFacade) error); ok {
		r0 = rf(ctx, user, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, user, l
func (_m *UserManagerInterface) Register(ctx *gin.Context, user *models.User, l *logfacade.LogFacade) error {
	ret := _m.Called(ctx, user, l)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User, *logfacade.LogFacade) error); ok {
		r0 = rf(ctx, user, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, user, l
func (_m *UserManagerInterface) Validate(ctx *gin.Context, user *models.User, l *logfacade.LogFacade) error {
	ret := _m.Called(ctx, user, l)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *models.User, *logfacade.LogFacade) error); ok {
		r0 = rf(ctx, user, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserManagerInterface creates a new instance of UserManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserManagerInterface {
	mock := &UserManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
