// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Aderon1333/TPES/internal/models"
	logfacade "github.com/Aderon1333/TPES/pkg/utils/logfacade"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, task, l
func (_m *TaskRepository) Create(ctx context.Context, task *models.Task, l *logfacade.LogFacade) error {
	ret := _m.Called(ctx, task, l)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task, *logfacade.LogFacade) error); ok {
		r0 = rf(ctx, task, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, id, l
func (_m *TaskRepository) FindOne(ctx context.Context, id int, l *logfacade.LogFacade) (*models.Task, error) {
	ret := _m.Called(ctx, id, l)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *logfacade.LogFacade) (*models.Task, error)); ok {
		return rf(ctx, id, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *logfacade.LogFacade) *models.Task); ok {
		r0 = rf(ctx, id, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *logfacade.LogFacade) error); ok {
		r1 = rf(ctx, id, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
