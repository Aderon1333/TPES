// proto/tpes/tpes.proto

// Версия ProtoBuf

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: tpes/task_handler.proto

// Текущий пакет - указывает пространство имен для сервиса и сообщений. Помогает избегать конфликтов имен.

package tpes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskHandler_GetTask_FullMethodName = "/grpc.task.handler.TaskHandler/GetTask"
	TaskHandler_PutTask_FullMethodName = "/grpc.task.handler.TaskHandler/PutTask"
)

// TaskHandlerClient is the client API for TaskHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHandlerClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type taskHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHandlerClient(cc grpc.ClientConnInterface) TaskHandlerClient {
	return &taskHandlerClient{cc}
}

func (c *taskHandlerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TaskHandler_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandlerClient) PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TaskHandler_PutTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHandlerServer is the server API for TaskHandler service.
// All implementations must embed UnimplementedTaskHandlerServer
// for forward compatibility.
type TaskHandlerServer interface {
	GetTask(context.Context, *GetTaskRequest) (*TaskResponse, error)
	PutTask(context.Context, *PutTaskRequest) (*TaskResponse, error)
	mustEmbedUnimplementedTaskHandlerServer()
}

// UnimplementedTaskHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskHandlerServer struct{}

func (UnimplementedTaskHandlerServer) GetTask(context.Context, *GetTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskHandlerServer) PutTask(context.Context, *PutTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (UnimplementedTaskHandlerServer) mustEmbedUnimplementedTaskHandlerServer() {}
func (UnimplementedTaskHandlerServer) testEmbeddedByValue()                     {}

// UnsafeTaskHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHandlerServer will
// result in compilation errors.
type UnsafeTaskHandlerServer interface {
	mustEmbedUnimplementedTaskHandlerServer()
}

func RegisterTaskHandlerServer(s grpc.ServiceRegistrar, srv TaskHandlerServer) {
	// If the following call pancis, it indicates UnimplementedTaskHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskHandler_ServiceDesc, srv)
}

func _TaskHandler_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHandler_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandler_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandlerServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHandler_PutTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandlerServer).PutTask(ctx, req.(*PutTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHandler_ServiceDesc is the grpc.ServiceDesc for TaskHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.task.handler.TaskHandler",
	HandlerType: (*TaskHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _TaskHandler_GetTask_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _TaskHandler_PutTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tpes/task_handler.proto",
}
